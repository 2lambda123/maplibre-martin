name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install clippy
        run: rustup component add clippy

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets --all-features -- -D warnings

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install rustfmt
        run: rustup component add rustfmt

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgis/postgis:14-3.1-alpine
        env:
          POSTGRES_DB: db
          POSTGRES_USER: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          # will assign a random free host port
          - 5432/tcp
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Setup database
        run: |
          sudo apt-get install postgresql-client
          psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U postgres -d db -f tests/fixtures/TileBBox.sql
          psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U postgres -d db -f tests/fixtures/table_source.sql
          psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U postgres -d db -f tests/fixtures/table_source_multiple_geom.sql
          psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U postgres -d db -f tests/fixtures/function_source.sql
          psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U postgres -d db -f tests/fixtures/function_source_query_params.sql
          psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U postgres -d db -f tests/fixtures/points1_source.sql
          psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U postgres -d db -f tests/fixtures/points2_source.sql
          psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U postgres -d db -f tests/fixtures/points3857_source.sql
          psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U postgres -d db -f tests/fixtures/points_empty_srid_source.sql
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all
        env:
          DATABASE_URL: postgres://postgres@localhost:${{ job.services.postgres.ports[5432] }}/db

      - name: Run build
        uses: actions-rs/cargo@v1
        with:
          command: build

      - name: Run server
        run: ./target/debug/martin --default-srid 900913 &
        env:
          DATABASE_URL: postgres://postgres@localhost:${{ job.services.postgres.ports[5432] }}/db

      - name: Test server response for table source
        run: .github/test_server_response_table_source.sh http://localhost:3000

      - name: Test server response for composite source
        run: .github/test_server_response_composite_source.sh http://localhost:3000

      - name: Test server response for function source
        run: .github/test_server_response_function_source.sh http://localhost:3000

      - name: Test server response for table source with different SRID
        run: .github/test_server_response_table_source_different_srid.sh http://localhost:3000

      - name: Test server response for table source with empty SRID
        run: .github/test_server_response_table_source_empty_srid.sh http://localhost:3000

      - name: Prepare config
        run: sed -i 's/5432/${{ job.services.postgres.ports[5432] }}/g' ./tests/config.yaml

      - name: Run server with config
        run: pkill martin && ./target/debug/martin --config ./tests/config.yaml &

      - name: Test server response
        run: .github/test_server_response.sh http://localhost:3000

  test-docker:
    name: Test docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Build docker image
        run: docker-compose -f .github/docker-compose.ci.yml build
          
      - name : Start docker-compose stack
        run: docker-compose -f .github/docker-compose.ci.yml up -d

      - name: Setup database
        run: |
          docker-compose -f .github/docker-compose.ci.yml exec db psql -U postgres -f /fixtures/TileBBox.sql
          docker-compose -f .github/docker-compose.ci.yml exec db psql -U postgres -f /fixtures/table_source.sql
          docker-compose -f .github/docker-compose.ci.yml exec db psql -U postgres -f /fixtures/table_source_multiple_geom.sql
          docker-compose -f .github/docker-compose.ci.yml exec db psql -U postgres -f /fixtures/function_source.sql
          docker-compose -f .github/docker-compose.ci.yml exec db psql -U postgres -f /fixtures/function_source_query_params.sql
          docker-compose -f .github/docker-compose.ci.yml exec db psql -U postgres -f /fixtures/points1_source.sql
          docker-compose -f .github/docker-compose.ci.yml exec db psql -U postgres -f /fixtures/points2_source.sql
          docker-compose -f .github/docker-compose.ci.yml exec db psql -U postgres -f /fixtures/points3857_source.sql
          docker-compose -f .github/docker-compose.ci.yml exec db psql -U postgres -f /fixtures/points_empty_srid_source.sql

      - name: Test server response for table source
        run: .github/test_server_response_table_source.sh http://localhost:3000

      - name: Test server response for composite source
        run: .github/test_server_response_composite_source.sh http://localhost:3000

      - name: Test server response for function source
        run: .github/test_server_response_function_source.sh http://localhost:3000

      - name: Test server response for table source with different SRID
        run: .github/test_server_response_table_source_different_srid.sh http://localhost:3000

      - name: Test server response for table source with empty SRID
        run: .github/test_server_response_table_source_empty_srid.sh http://localhost:3000

      - name: Test server response
        run: .github/test_server_response.sh http://localhost:3000

  docker:
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      # https://github.com/docker/metadata-action
      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: maplibre/martin

      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Login to DockerHub
        uses: docker/login-action@v2
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push the Docker image
        uses: docker/build-push-action@v3
        with:
          push: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [test]
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        include:
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            bin: martin
            name: martin-Linux-x86_64.tar.gz
          - os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
            bin: martin.exe
            name: martin-Windows-x86_64.zip
          - os: macOS-latest
            rust: stable
            target: x86_64-apple-darwin
            bin: martin
            name: martin-Darwin-x86_64.tar.gz
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
          target: ${{ matrix.target }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Run build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
      - name: Package
        shell: bash
        run: |
          strip target/${{ matrix.target }}/release/${{ matrix.bin }}
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]
          then
            7z a ../../../${{ matrix.name }} ${{ matrix.bin }}
          else
            tar czvf ../../../${{ matrix.name }} ${{ matrix.bin }}
          fi
          cd -
      - name: Generate SHA-256
        if: matrix.os == 'macOS-latest'
        run: shasum -a 256 ${{ matrix.name }}
      - name: Publish
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: 'martin*'
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
